import { useSpring, animated } from 'react-spring';\nimport { useDrag } from '@use-gesture/react';\nimport { useState } from 'react';\nimport { CheckCircle2, Trash2, Clock, Edit3 } from 'lucide-react';\nimport { Task } from '../../shared/types';\nimport { cn } from '@/lib/utils';\n\ninterface SwipeableTaskCardProps {\n  children: React.ReactNode;\n  task: Task;\n  onComplete: () => void;\n  onDelete: () => void;\n  onEdit: () => void;\n  onPostpone?: () => void;\n}\n\nconst SWIPE_THRESHOLD = 80;\nconst COMPLETE_THRESHOLD = 150;\nconst DELETE_THRESHOLD = 150;\n\nexport function SwipeableTaskCard({ \n  children, \n  task, \n  onComplete, \n  onDelete, \n  onEdit,\n  onPostpone \n}: SwipeableTaskCardProps) {\n  const [action, setAction] = useState<'complete' | 'delete' | 'postpone' | null>(null);\n\n  const [{ x, opacity, scale }, api] = useSpring(() => ({\n    x: 0,\n    opacity: 1,\n    scale: 1,\n    config: { tension: 300, friction: 30 }\n  }));\n\n  const bind = useDrag(\n    ({ \n      movement: [mx], \n      velocity: [vx], \n      direction: [dx], \n      down, \n      cancel,\n      tap,\n      elapsedTime \n    }) => {\n      // Handle tap for edit\n      if (tap && elapsedTime < 200) {\n        onEdit();\n        return;\n      }\n\n      // Determine action based on swipe direction and distance\n      let newAction: typeof action = null;\n      \n      if (Math.abs(mx) > SWIPE_THRESHOLD && down) {\n        if (mx > 0) {\n          // Swipe right - complete or postpone\n          newAction = mx > COMPLETE_THRESHOLD ? 'complete' : 'postpone';\n        } else {\n          // Swipe left - delete\n          newAction = Math.abs(mx) > DELETE_THRESHOLD ? 'delete' : null;\n        }\n        \n        // Haptic feedback on action change\n        if (newAction !== action && 'vibrate' in navigator) {\n          navigator.vibrate(50);\n        }\n        \n        setAction(newAction);\n      } else if (!down) {\n        setAction(null);\n      }\n\n      // Execute action on release with sufficient velocity or distance\n      if (!down) {\n        const shouldExecute = Math.abs(mx) > SWIPE_THRESHOLD * 1.5 || Math.abs(vx) > 0.5;\n        \n        if (shouldExecute && action) {\n          // Haptic feedback for action execution\n          if ('vibrate' in navigator) {\n            navigator.vibrate([100, 50, 100]);\n          }\n          \n          // Execute the action with animation\n          if (action === 'complete') {\n            api.start({ \n              x: window.innerWidth, \n              opacity: 0, \n              scale: 0.8,\n              onRest: onComplete \n            });\n            return;\n          } else if (action === 'delete') {\n            api.start({ \n              x: -window.innerWidth, \n              opacity: 0, \n              scale: 0.8,\n              onRest: onDelete \n            });\n            return;\n          } else if (action === 'postpone' && onPostpone) {\n            onPostpone();\n          }\n        }\n        \n        // Reset position if action not executed\n        api.start({ x: 0, opacity: 1, scale: 1 });\n      } else {\n        // Update position while dragging\n        const clampedX = Math.max(-window.innerWidth * 0.3, Math.min(window.innerWidth * 0.3, mx));\n        api.start({ \n          x: clampedX, \n          immediate: true,\n          scale: 1 - Math.abs(clampedX) / (window.innerWidth * 2)\n        });\n      }\n    },\n    {\n      axis: 'x',\n      bounds: { left: -window.innerWidth * 0.3, right: window.innerWidth * 0.3 },\n      rubberband: true,\n      filterTaps: true,\n      preventScroll: true,\n    }\n  );\n\n  const getActionColor = () => {\n    switch (action) {\n      case 'complete':\n        return 'bg-green-500/20 border-green-500/30';\n      case 'delete':\n        return 'bg-red-500/20 border-red-500/30';\n      case 'postpone':\n        return 'bg-yellow-500/20 border-yellow-500/30';\n      default:\n        return '';\n    }\n  };\n\n  const getActionIcon = () => {\n    switch (action) {\n      case 'complete':\n        return <CheckCircle2 size={24} className=\"text-green-500\" />;\n      case 'delete':\n        return <Trash2 size={24} className=\"text-red-500\" />;\n      case 'postpone':\n        return <Clock size={24} className=\"text-yellow-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getActionText = () => {\n    switch (action) {\n      case 'complete':\n        return 'Complete Task';\n      case 'delete':\n        return 'Delete Task';\n      case 'postpone':\n        return 'Postpone';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className=\"relative overflow-hidden\">\n      {/* Background Actions */}\n      {action && (\n        <div className={cn(\n          'absolute inset-0 flex items-center justify-center',\n          'transition-colors duration-200',\n          action === 'complete' && 'bg-green-500/10',\n          action === 'delete' && 'bg-red-500/10',\n          action === 'postpone' && 'bg-yellow-500/10'\n        )}>\n          <div className=\"flex flex-col items-center gap-1\">\n            {getActionIcon()}\n            <span className={cn(\n              'text-xs font-medium',\n              action === 'complete' && 'text-green-600 dark:text-green-400',\n              action === 'delete' && 'text-red-600 dark:text-red-400',\n              action === 'postpone' && 'text-yellow-600 dark:text-yellow-400'\n            )}>\n              {getActionText()}\n            </span>\n          </div>\n        </div>\n      )}\n      \n      {/* Swipe Indicators */}\n      <div className=\"absolute left-4 top-1/2 -translate-y-1/2 opacity-30\">\n        <CheckCircle2 size={20} className=\"text-green-500\" />\n      </div>\n      <div className=\"absolute right-4 top-1/2 -translate-y-1/2 opacity-30\">\n        <Trash2 size={20} className=\"text-red-500\" />\n      </div>\n      \n      {/* Main Card */}\n      <animated.div\n        {...bind()}\n        style={{\n          x,\n          opacity,\n          scale,\n          touchAction: 'pan-y'\n        }}\n        className={cn(\n          'relative z-10 cursor-grab active:cursor-grabbing',\n          'select-none touch-manipulation',\n          action && getActionColor()\n        )}\n      >\n        {children}\n      </animated.div>\n      \n      {/* Swipe Instructions (show only for first few tasks) */}\n      {task.createdAt > new Date(Date.now() - 5 * 60 * 1000) && ( // Show for tasks created in last 5 minutes\n        <div className=\"absolute top-2 right-2 z-20\">\n          <div className=\"bg-primary/10 text-primary text-xs px-2 py-1 rounded-full animate-pulse\">\n            Swipe â†’\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"